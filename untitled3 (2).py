# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0SnkNV1hVrgXZ_HZHSyBZ4ezbyuuWAB

2 - Indentation - Python uses indentation (whitespaces) to define the structure and blocks of code, such as loops and functions.

Consistent indentation is requires, typically 4 spaces per level.
"""

if True:
  print("hello world")

if True:
print("hello world")

"""# Variables and Data Types
# Variables are used to store data values.
# No need to declare the data type explicitly; Python infers it automatically. **bold text** **bold text**

1. Numeric Types

Integer (int): Whole numbers without a decimal point.

Float (float): Numbers with a decimal point.

Complex (complex): Numbers with a real and imaginary part.
"""

# Integer
a = 10

a

type(a)

# FLOAT

b = 3.15

print(b)

type(b)

# complex
c = 2 + 3j

c

type(c)

"""# 2. String (str)
A sequence of characters enclosed within single quotes, double quotes, or triple quotes.
"""

# single quotes

name = 'Harsh'

print(name)
print(type(name))

# double quotes

name1 = "Dipali"

print(name1)
print(type(name1))

#tripple quotes

name3 = '''This is
data science class '''

print(name3)
print(type(name3))

"""#3. Boolean (bool)
Represents two values: True or False.
"""

abc1 = True

abc22 = False

type(abc1)

"""##4. List (list)
An ordered, mutable collection of elements enclosed in square brackets [ ].

Lists can hold elements of different types.
"""

# list of int.

data = [1,2,3,4,5]

type(data)

#list of string

data1 = ["Harsh", "Dipali", "Tushar"]

type(data1)

# mix data type

data3 = [4, 5, 5.4 , 7.9, True , False  , "Harsh", "Dipali"]

type(data3)

"""##5. Tuple (tuple)
An ordered, immutable collection of elements enclosed in parentheses ( ).

 Like lists, tuples can also hold elements of different types.
"""

# tuple of int.

data1 = (2,5,8,5)

type(data1)

data2 = (2 ,4 , 5.8, 9.5 , True , False , "Harsh", "Dipali")

type(data2)

"""# ##6. Dictionary (dict)
An unordered, mutable collection of key-value

pairs enclosed in curly braces {  }.
"""

student = {"name1" : "Harsh", "age" : 25, "present" : True, "Height" : 156.7 }

student

print(student)

print(student["age"])

student["age"] = 21

student

student["Height"] = 160

student

student['name1'] = "Dipali"

student

"""#7. Set (set)
An unordered, mutable collection of unique elements enclosed in curly braces { }.
"""

#set of int

number2 = {1,5,4,7,8,4,5,1,2,3,1,4,2,4,1,2,4,5}

number2

number2.add(6)

number2

number2.remove(8)

number2

"""#8. None Type
Represents the absence of a value. It is the only value of the NoneType data type.
"""

blank = None

type(blank)

"""#Operators
Arithmetic Operators: +, -, *, /, //, %, **
"""

a = 10
b = 3

print( a+ b)

print( a- b)

#mul

print( a * b)

#div

print( a / b )

#floor division

print( a // b)

#modulus

print( a % b)   #reminder

print( a ** b) # power of

print (2 ** 2)

print( 2 ** 3)

"""#2. Comparison Operators
Compare two values and return a Boolean result (True or False).
"""

x = 5
y = 10

# eqal to
print( x == y)

# not qual to

print( x != y)

print( x> y)

print( x < y)

#greater than or qual to

print ( x >= 6)

#less than equal to

print ( y <= 10)

"""#3. Logical Operators
Perform logical operations on Boolean values.

"""

p = True
q = False

r = True

#Logical AND

print ( p and q)

print( p and r)
print (p & r)

# logical OR

print( p or q)
print(p | q)

# logical  NOT

print(not q)

pr