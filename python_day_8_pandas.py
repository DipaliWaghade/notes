# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WqDnIGvb-mA42aGA1r3-hYLPTkTcuhjY

#panda

Pandas is a powerful library in Python for data manipulation and analysis, especially suited for working with structured data like tabular data in CSV, Excel files, and databases.

CSV (Comma sEPARATED vALUE)

Analyzing, cleaning, exploring, and manipulation

Panel Data & Python Data Analysis
created by Wes McKinney
2008
"""

pip install pandas

import pandas as pd

mydata = {'cars': ["BMW", "VOLVO", "MECEDEES"], 'Seating':[2, 12, 4]}

mydata

df = pd.DataFrame(mydata)

df

print(df)

pd.__version__

a = [ 7,8,9,7,8,5,6,8]

type(a)

my = pd.Series(a)

my

my[4]

df

calories = {"day1": 420, "day2" : 380, "day3":390}

my1 = pd.Series(calories)

my1

my2 = pd.Series(calories, index= ["harsh", "Dipali"])

my2

my2 = pd.Series(calories, index= ["day1", "day2", "day3"])

my2

"""#creating Dataframe"""

data = {"Name": ["Harsh", "Dipali", "Tushar"],
        "Age": [21,23,32] ,
        "City":["seloo", "Nagpur", "Wardha"]
        }

df = pd.DataFrame(data)

df

data1 = [["Harsh", 21], ["Dipali", 23], ["Tushar", 32]]

df1 = pd.DataFrame(data1, columns= ['Name', 'Age'])

df1

data1 = [["Harsh", 21], ["Dipali", 23], ["Tushar", 32]]
c1 = ['NAME', 'AGE']
df1 = pd.DataFrame(data1, columns= c1)

df1

df5 = pd.read_csv('/content/sample_data/california_housing_test.csv')

df5

df5.head()

df5.tail()

import pandas as pd

df = pd.read_csv("/content/sample_data/california_housing_test.csv")

df

df.head(2)

df.shape

df.columns

column_name = df.columns

column_name

df.info()

df.describe()

df['population']



"""

### **Practice Set 1: Array Creation**
1. Create a NumPy array containing the numbers from 10 to 50 (inclusive) with a step of 5.
2. Create a 3x3 matrix filled with zeros.
3. Create a 4x4 identity matrix.

---

### **Practice Set 2: Array Indexing and Slicing**
1. Create a 1D array of 15 elements. Use slicing to get the first 5 elements.
2. Create a 3x3 matrix and extract the second column.
3. For the matrix you created in the previous practice set, change all the elements in the second row to `100`.

---

### **Practice Set 3: Mathematical Operations**
1. Create two NumPy arrays `a` and `b` with 5 random numbers each. Perform element-wise addition, subtraction, multiplication, and division.
2. Find the sum, mean, and standard deviation of a 1D array containing random integers between 1 and 100.
3. Create a 5x5 matrix of random numbers between 0 and 1 and find the maximum and minimum values in the matrix.

---

### **Practice Set 4: Reshaping and Manipulation**
1. Create a 1D array with 16 elements. Reshape it into a 4x4 matrix.
2. Flatten a 3x3 matrix into a 1D array.
3. Stack two 1D arrays horizontally and vertically.

---

### **Practice Set 5: Handling Missing Values (NaN)**
1. Create a 1D array with 10 elements, and randomly assign NaN values to some of the elements. Use `np.isnan()` to identify the NaN values.
2. Create a 2D array with NaN values, then compute the mean of the array while ignoring NaN values using `np.nanmean()`.

---

### **Practice Set 6: Sorting and Searching**
1. Create an array of 10 random integers. Sort the array in ascending order and find the index positions of the sorted values using `np.argsort()`.
2. Find the index of the maximum and minimum value in a 1D array using `np.argmax()` and `np.argmin()`.

---

### **Practice Set 7: Linear Algebra**
1. Create two matrices A and B (both 3x3). Perform matrix multiplication using `np.dot()` and verify the result using `@` operator.
2. Compute the determinant and the inverse of a 3x3 matrix.

---

### **Practice Set 8: Broadcasting**
1. Create a 5x5 matrix filled with random values. Add a 1D array of 5 elements (such as `[1, 2, 3, 4, 5]`) to each row of the matrix using broadcasting.
2. Create a 2D array of shape (3, 3) and add a scalar value (e.g., 10) to all elements of the array.

---

### **Practice Set 9: File I/O Operations**
1. Create a 2D array and save it to a `.npy` file. Load the array from the `.npy` file and verify the values.
2. Create a 1D array and save it to a `.txt` file in CSV format. Load the data from the `.txt` file and display it.

---

### **Practice Set 10: Advanced Operations**
1. Generate a 1D array with 50 random numbers and compute the cumulative sum using `np.cumsum()`.
2. Create a 4x4 array and calculate the correlation matrix of the array using `np.corrcoef()`.

---

These exercises cover a broad range of topics in NumPy, including array creation, indexing, mathematical operations, handling missing data, file I/O, and linear algebra. Completing these will enhance your understanding and proficiency with NumPy."""

