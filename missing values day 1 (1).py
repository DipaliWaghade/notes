# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eNQrh3luEhizvv5wEma1o6wv_au2U67x
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = sns.load_dataset('titanic')

df.head()

## check missing values
df.isnull().sum()

#delete the rows or data points to handle missing values

df.shape

df.dropna(axis=1)

"""#imputation missing values"""

#mean value imputation

sns.histplot(df['age'], kde =True)

df['age_mean'] = df['age'].fillna(df['age'].mean())

df[['age', 'age_mean']]

#mean imputation works well when we have normally distributed data. a

"""2. median value imputation - ifwe have outliers in dataset"""

df['age_median'] = df['age'].fillna(df['age'].median())

df[['age_mean', 'age']]

df.head()

"""3. mode imputation - categorical values"""

df['embarked'].isnull().sum()

df[df['embarked'].isnull()]

df['embarked'].unique()

df['embarked'].mode()

df['embarked'].mode()[0]    #0 is for sliceing. 0th index

df[df['embarked'].notna()]['embarked'].mode()[0]

df['embarked_mode'] =df['embarked'].fillna(df[df['embarked'].notna()]['embarked'].mode()[0])

df[['embarked', 'embarked_mode']]

df['embarked_mode'].isnull().sum()

"""#handeling imbalance dataeset"""

#set a random seed for repoductibility

np.random.seed(123)

n_samples = 1000
class_ratio = 0.9
n_class_0 =int(n_samples * class_ratio)
nclass_1 = n_samples - n_class_0

n_class_0, nclass_1

class_0 = pd.DataFrame ({
    'feature_1' : np.random.normal(loc =0, scale=1, size =n_class_0),
    'feature_2' : np.random.normal(loc =0, scale = 1, size =n_class_0),
    'target':[0]*n_class_0
})

class_1 = pd.DataFrame ({
    'feature_1' : np.random.normal(loc =2, scale=1, size =nclass_1),
    'feature_2' : np.random.normal(loc =2, scale = 1, size =nclass_1),
    'target':[1]*nclass_1
})

df = pd.concat([class_0, class_1]).reset_index(drop=True)

df.head()

df.tail()

df['target'].value_counts()

